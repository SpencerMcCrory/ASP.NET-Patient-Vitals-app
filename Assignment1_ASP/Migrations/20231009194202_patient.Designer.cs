// <auto-generated />
using System;
using Assignment1_ASP.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1_ASP.Migrations
{
    [DbContext(typeof(PatientContext))]
    [Migration("20231009194202_patient")]
    partial class patient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment1_ASP.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diastolic")
                        .HasColumnType("int");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Stylostic")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("PositionId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Date = new DateTime(2013, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diastolic = 0,
                            PositionId = "St",
                            Stylostic = 70
                        },
                        new
                        {
                            PatientId = 2,
                            Date = new DateTime(2017, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diastolic = 0,
                            PositionId = "Si",
                            Stylostic = 80
                        },
                        new
                        {
                            PatientId = 3,
                            Date = new DateTime(2023, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diastolic = 0,
                            PositionId = "Ly",
                            Stylostic = 110
                        });
                });

            modelBuilder.Entity("Assignment1_ASP.Models.Position", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = "St",
                            Name = "Standing"
                        },
                        new
                        {
                            PositionId = "Si",
                            Name = "Sitting"
                        },
                        new
                        {
                            PositionId = "Ly",
                            Name = "Lying Down"
                        });
                });

            modelBuilder.Entity("Assignment1_ASP.Models.Patient", b =>
                {
                    b.HasOne("Assignment1_ASP.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });
#pragma warning restore 612, 618
        }
    }
}
